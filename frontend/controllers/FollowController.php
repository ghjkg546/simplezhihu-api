<?php
namespace frontend\controllers;

use backend\models\ZhihuQuestion;
use general\components\JwtTool;
use general\models\Bike;
use general\models\ZhihuAnswerFollow;
use general\models\ZhihuComment;
use general\models\FollowRelation;
use general\models\Member;
use general\models\RepairRecords;
use general\models\RidingRecord;
use general\models\VoteMember;
use general\models\ZhihuAnswer;
use general\models\ZhihuFollow;
use general\models\ZhihuFollowUser;
use general\models\ZhihuQuestionFollow;
use Yii;
use yii\helpers\Json;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;

/**
 * Site controller
 */
class FollowController extends Controller
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $type = $data['type'];
        $qu = ZhihuFollow::find();
        if ($type == 1) {
            $qu->orderBy('up_count desc');
        } elseif ($type == 0) {
            $uid = Yii::$app->user->id;
            $ids = FollowRelation::find()->select(['user_id'])->where(['follower_id' => $uid])->column();
            $qu->andWhere(['author_id' => $ids]);
        } elseif ($type == 4) {
            $a = ZhihuFollowUser::find()
                ->from(ZhihuFollowUser::tableName() . ' follow')
                ->select(['member.*', 'follow.*'])
                ->innerJoin(Member::tableName() . ' member', 'member.id=follow.user_id')
                ->where(['user_id' => 1])->asArray()->all();
            foreach ($a as $k => $v) {
                $a[$k]['is_follow'] = 1;
            }
            return Json::encode($a);
        }
        $p = $qu->all();
        $member = Member::find()->indexBy('id')->asArray()->all();
        foreach ($p as $k => $v) {
            if (!empty($v['vote_member'])) {
                foreach ($v['vote_member'] as $k1 => $v1) {
                    $p[$k]['vote_member'][$k1]['name'] = $member[$v1['member_id']]['username'];
                }
            }
        }
        foreach ($p as $k => $v) {
            $p[$k]['voter'] = !empty($v['vote_member'][0]['name']) ? $v['vote_member'][0]['name'] : '还没人';
        }
        return Json::encode($p);
    }

    public function actionDetail()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $p = ZhihuAnswer::find()
            ->asArray()
            ->where(['id' => $data['id']])
            ->one();
        $uid = Yii::$app->user->id;
        $p['author'] = Member::findOne($p['author_id']);
        return Json::encode($p);
    }

    public function actionAnswerlist()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $p = ZhihuAnswer::find()
            ->asArray()
            ->where(['answer_id' => $data['id']])
            ->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($p as $k => $v) {
            $p[$k]['author_name'] = $authors[$v['author_id']];
            $p[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $uid = Yii::$app->user->id;
        return Json::encode($p);
    }

    public function actionWriteanswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = 1;
        $answer = new ZhihuAnswer();
        $answer->author_id = $author_id;
        $answer->content = $data['answer_content'];
        $answer->create_time = time();
        $answer->answer_id = $data['answer_id'];
        $answer->save();
        $a['state'] = 1;

        $p = ZhihuAnswer::find()
            ->asArray()
            ->where(['answer_id' => $data['answer_id']])
            ->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($p as $k => $v) {
            $p[$k]['author_name'] = $authors[$v['author_id']];
            $p[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $a['content'] = $p;
        return Json::encode($a);
    }


    /**
     * 获取用户关注问题
     * @return string
     */
    public function actionGetFollowAnswer()
    {
        $follow_ids = ZhihuQuestionFollow::find()->where(['user_id' => JwtTool::getUserId()])->select(['question_id'])->column();
        $questions = ZhihuQuestion::find()->where(['id' => $follow_ids])->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($questions as $k => $v) {
            $questions[$k]['author_name'] = $authors[$v['author_id']];
            $questions[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        return Json::encode(['code' => 0, 'data' => $questions]);
    }

    /**
     * 取消关注回答
     * @return string
     */
    public function actionCancelFollowAnswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        ZhihuQuestionFollow::deleteAll(['user_id' => JwtTool::getUserId(), 'question_id' => $data['id']]);
        $follow_ids = ZhihuQuestionFollow::find()->where(['user_id' => JwtTool::getUserId()])->select(['question_id'])->column();
        $questions = ZhihuQuestion::find()->where(['id' => $follow_ids])->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($questions as $k => $v) {
            $questions[$k]['author_name'] = $authors[$v['author_id']];
            $questions[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        return Json::encode(['code' => 0, 'data' => $questions]);
    }


    /**
     * 生成token
     * @param $data
     * @return mixed
     */
    public static function getToken($data)
    {
        $token1 = Yii::$app->jwt->getBuilder()->setIssuer('jztw.com')// Configures the issuer (iss claim)
        ->setIssuedAt(time()); // Configures the time that the token was issue (iat claim)
        //->setNotBefore(time() + 60) // Configures the time before which the token cannot be accepted (nbf claim)
        //->setExpiration(time() + 3600); // 过期时间
        foreach ($data as $k => $v) {
            $token1->set($k, $v);
        }
        $token = $token1->getToken();
        return (string)$token;
    }

    public function actionVoteComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $comment_id = $data['comment_id'];
        $answer = ZhihuComment::findOne($comment_id);
        $answer->vote_count += 1;
        $answer->save();
        $res = ZhihuComment::find()
            ->with('author')
            ->where(['answer_id' => $answer_id])->asArray()->all();
        foreach ($res as $k => $v) {
            $res[$k]['create_time'] = date('H:i', $res[$k]['create_time']);
        }
        return Json::encode($res);
    }


}
