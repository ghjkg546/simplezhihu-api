<?php
namespace frontend\controllers;

use backend\models\ZhihuFollowUser;
use general\components\CurlTool;
use general\components\JwtTool;
use general\models\FollowRelation;
use general\models\Member;
use general\models\wx\WXBizDataCrypt;
use general\models\ZhihuAnswer;
use general\models\ZhihuFav;
use general\models\ZhihuMember;
use general\models\ZhihuQuestionViewLog;
use Yii;
use yii\helpers\Json;
use yii\web\Controller;

/**
 * 用户控制器
 */
class UserController extends Controller
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionTest()
    {
        return $this->render($this->action->id);
    }


    public function actionInfo()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $user_id = JwtTool::getUserId();
        $user = ZhihuMember::findOne(['id' => $user_id]);
        $answer_count = ZhihuAnswer::find()->where(['author_id' => $user_id])->count();
        $follow_count = FollowRelation::find()->where(['user_id' => $user_id])->count();
        $fav_count = ZhihuFav::find()->where(['user_id' => $user_id])->count();
        $view_count = ZhihuQuestionViewLog::find()->where(['user_id' => $user_id])->count();
        return Json::encode([
            'state' => 1, 'answer_count' => $answer_count, 'follow_count' =>
                $follow_count, 'fav_count' => $fav_count, 'view_count' => $view_count, 'user' => $user
        ]);
    }



    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();
        $data['code'] = 20000;
        $data['data'] = 'success';
        return Json::encode($data);

        return $this->goHome();
    }


    /**
     * 返回从微信服务器解密到的用户信息
     * @return array|mixed
     */
    public function actionGetuserdata()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $js_code = $data['code'];
        $encryptedData = $data['encryptedData'];
        $iv = $data['iv'];

        $appid = Yii::$app->params['wx']['appid'];
        $secret = Yii::$app->params['wx']['secret'];
        $url = "https://api.weixin.qq.com/sns/jscode2session?appid={$appid}&secret={$secret}&js_code={$js_code}&grant_type=authorization_code";
        $response = json_decode(CurlTool::get($url), true);
        if (!empty($response['errcode'])) {
            print_r($response['errmsg']);
            exit;
        }
        $session = Yii::$app->session;
        if (!$session->isActive) {
            $session->open();
        }
        $sessionKey = $response['session_key'];
        $pc = new WXBizDataCrypt($appid, $sessionKey);
        $errCode = $pc->decryptData($encryptedData, $iv, $data);

        if ($errCode != 0) {
            print_r($errCode);
            exit;
        }
        return $data;
    }

    /**
     * 登录
     * @return string
     */
    public function actionLogin()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $name = $data['username'];
        $password = $data['password'];
        $member = ZhihuMember::find()->where(['username' => $name, 'password' => md5($password)])->one();
        if ($member) {
            $token_data = ['uid' => $member->id, 'login_name' => $name];
            $token = JwtTool::getToken($token_data);
            $data = ['token' => $token, 'uid' => $member->id, 'login_name' => $name]; //默认sid];
            return Json::encode(['state' => 1, 'text' => '', 'data' => $data, 'token' => $token]);
        }
        return Json::encode(['state' => 0, 'text' => '错误的用户名密码']);

    }

    /**
     * 关注列表
     * @return string
     */
    public function actionFollowList()
    {
        $res = FollowRelation::find()
            ->select(['m.username', 'm.id', 'm.brief', 'm.avatar'])
            ->from(FollowRelation::tableName() . ' fr')
            ->innerJoin(Member::tableName() . ' m', 'm.id=fr.user_id')
            ->where(['follower_id' => JwtTool::getUserId()])->asArray()->all();
        $result['code'] = 0;
        $result['data'] = $res;
        return Json::encode($result);
    }

    /**
     * 关注用户
     * @return string
     */
    public function actionFollowAuthor()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = $data['author_id'];
        $header = Yii::$app->request->headers;
        $token = $header->get('token');
        $follower_id = JwtTool::parseToken($token);
        $followed = FollowRelation::findOne(['user_id' => $author_id, 'follower_id' => $follower_id]);
        if (!$followed) {
            $fl = new FollowRelation();
            $fl->user_id = $author_id;

            $fl->follower_id = $follower_id;
            $fl->save();
            $result['follow_text'] = '已关注';
        } else {
            FollowRelation::deleteAll(['user_id' => $author_id, 'follower_id' => $follower_id]);
            $result['follow_text'] = '关注';
        }
        return Json::encode($result);
    }


    /**
     * 取消关注
     * @return string
     */
    public function actionCancelFollow()
    {
        $uid = Yii::$app->user->id;
        if (empty($uid)) {
            $uid = 1;
        }
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        FollowRelation::deleteAll(['follower_id' => $uid, 'user_id' => $data['id']]);
        $res = FollowRelation::find()
            ->select(['m.username', 'm.id', 'm.brief', 'm.avatar'])
            ->from(FollowRelation::tableName() . ' fr')
            ->innerJoin(Member::tableName() . ' m', 'm.id=fr.user_id')
            ->where(['follower_id' => $uid])->asArray()->all();
        return Json::encode(['code' => 0, 'data' => $res]);
    }



}
