<?php
namespace frontend\controllers;

use backend\models\ZhihuQuestion;
use general\components\JwtTool;
use general\components\Tool;
use general\models\ZhihuAnswerLike;
use general\models\ZhihuComment;
use general\models\FollowRelation;
use general\models\Member;
use general\models\ZhihuAnswer;
use general\models\ZhihuCommentLikeUser;
use general\repositories\AnswerRepository;
use general\repositories\CommentRepository;
use Yii;
use yii\base\Module;
use yii\helpers\Json;
use yii\web\Controller;

/**
 * Site controller
 */
class AnswerController extends Controller
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    private $answerRepository;
    private $commentRepository;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }


    public function __construct($id, Module $module, array $config = [])
    {
        $this->answerRepository = new AnswerRepository();
        $this->commentRepository = new CommentRepository();
        parent::__construct($id, $module, $config);
    }

    public function actionIndex()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $type = $data['type'];
        $qu = ZhihuAnswer::find()
            ->asArray()
            ->with('vote_member');
        if ($type == 1) {
            $qu->orderBy('up_count desc');
        } elseif ($type == 0) {
            $uid = Yii::$app->user->id;
            $ids = FollowRelation::find()->select(['user_id'])->where(['follower_id' => $uid])->column();
            $qu->andWhere(['author_id' => $ids]);
        }
        $p = $qu->all();
        $member = Member::find()->indexBy('id')->asArray()->all();
        foreach ($p as $k => $v) {
            if (!empty($v['vote_member'])) {
                foreach ($v['vote_member'] as $k1 => $v1) {
                    $p[$k]['vote_member'][$k1]['name'] = $member[$v1['member_id']]['username'];
                }
            }
        }
        foreach ($p as $k => $v) {
            $p[$k]['voter'] = !empty($v['vote_member'][0]['name']) ? $v['vote_member'][0]['name'] : '还没人';
        }
        return Json::encode($p);
    }

    public function actionDetail()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $result = $this->answerRepository->one($data);

        return Json::encode($result);
    }

    public function actionAnswerlist()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $p = ZhihuAnswer::find()
            ->asArray()
            ->where(['answer_id' => $data['id']])
            ->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($p as $k => $v) {
            $p[$k]['author_name'] = $authors[$v['author_id']];
            $p[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $uid = Yii::$app->user->id;
        return Json::encode($p);
    }

    //我的回答
    public function actionMyAnswerList()
    {
        $post = file_get_contents('php://input');
        $post = Json::decode($post);
        $page_size = 10;
        $page = isset($post['page']) ? $post['page'] : 1;
        $answers_query = ZhihuAnswer::find()
            ->select(['answer.content', 'answer.create_time', 'question.title', 'answer.id'])
            ->from(ZhihuAnswer::tableName() . ' answer')
            ->innerJoin(ZhihuQuestion::tableName() . ' question', 'answer.question_id = question.id')
            ->where(['answer.author_id' => JwtTool::getUserId()])->limit($page_size)->offset(($page - 1) * $page_size);
        $clone = clone $answers_query;
        $count = $clone->count();
        $answers = $answers_query->asArray()->all();
        foreach ($answers as $k => $v) {
            $answers[$k]['create_time'] = Tool::get_last_time($v['create_time']);
        }
        return Json::encode(['state' => 1, 'answers' => $answers, 'total_page' => ceil($count / $page_size)]);
    }

    //写回答
    public function actionWriteAnswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = 1;
        $answer = new ZhihuAnswer();
        $answer->author_id = $author_id;
        $answer->content = $data['answer_content'];
        $answer->create_time = time();
        $answer->question_id = $data['question_id'];
        $answer->save();
        $a['state'] = 1;

        return Json::encode($a);
    }

    /**
     * 关注答主
     * @return string
     */
    public function actionFollowAuthor()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = $data['author_id'];
        $fl = new FollowRelation();
        $fl->user_id = $author_id;
        $fl->follower_id = Yii::$app->user->id;
        $fl->save();
        $p['state'] = 1;
        return Json::encode($p);
    }

    /**
     * 点赞
     * @return string
     */
    public function actionLike()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $result = $this->answerRepository->like($data);

        return Json::encode($result);
    }

    /**
     * 评论列表
     * @return string
     */
    public function actionComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $res = ZhihuComment::find()
            ->with('author')
            ->where(['answer_id' => $answer_id])->asArray()->all();
        $comment_ids = array_column($res,'id');
        $liked_ids = ZhihuCommentLikeUser::find()->select(['comment_id'])->where(['comment_id'=>$comment_ids])->column();
        foreach ($res as $k => $v) {
            $res[$k]['create_time'] = date('m-d H:i', $res[$k]['create_time']);
            $res[$k]['liked'] = in_array($v['id'], $liked_ids) ? 1 : 0;
        }
        return Json::encode($res);
    }

    /**
     * 留下评论
     * @return string
     */
    public function actionLeaveComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $res = $this->commentRepository->write($data);
        return Json::encode($res);
    }

    /**
     * 感谢
     * @return string
     */
    public function actionThankAnswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $result = $this->answerRepository->thank($data);

        return Json::encode($result);
    }

    /**
     * 点赞评论
     * @return string
     */
    public function actionLikeComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $res = $this->commentRepository->like($data);
        return Json::encode($res);
    }


}
