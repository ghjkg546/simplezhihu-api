<?php
namespace frontend\controllers;

use general\components\JwtTool;
use general\models\Bike;
use general\models\ZhihuMember;
use general\models\ZhihuNotice;
use general\models\ZhihuQuestion;
use general\models\Comment;
use general\models\FollowRelation;
use general\models\Member;
use general\models\RepairRecords;
use general\models\RidingRecord;
use general\models\VoteMember;
use general\models\ZhihuAnswer;
use general\models\ZhihuQuestionFollow;
use Yii;
use yii\helpers\Json;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;

/**
 * Site controller
 */
class QuestionController extends Controller
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $type = $data['type'];
        $qu = ZhihuQuestion::find()
            ->asArray();
        if ($type == 1) {
            $qu->orderBy('up_count desc');
        } elseif ($type == 0) {
            $uid = Yii::$app->user->id;
            $ids = FollowRelation::find()->select(['user_id'])->where(['follower_id' => $uid])->column();
            $qu->andWhere(['author_id' => $ids]);
        }
        $p = $qu->all();
        $member = Member::find()->indexBy('id')->asArray()->all();
        foreach ($p as $k => $v) {
            $p['content'] = substr($v['content'], 0, 100);

        }
        return Json::encode($p);
    }

    public function actionRecent()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $type = $data['type'];
        $qu = ZhihuQuestion::find()
            ->asArray();
        if ($type == 1) {
            $qu->orderBy('up_count desc');
        } elseif ($type == 0) {
            $uid = Yii::$app->user->id;
            $ids = FollowRelation::find()->select(['user_id'])->where(['follower_id' => $uid])->column();
            $qu->andWhere(['author_id' => $ids]);
        }
        $p = $qu->all();
        $member = Member::find()->indexBy('id')->asArray()->all();
        foreach ($p as $k => $v) {
            $p['content'] = substr($v['content'], 0, 100);

        }
        return Json::encode($p);
    }

    public function actionDetail()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $question = ZhihuQuestion::findOne($data['id']);
        $answers = ZhihuAnswer::find()
            ->asArray()
            ->where(['question_id' => $data['id']])
            ->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($answers as $k => $v) {
            $answers[$k]['author_name'] = $authors[$v['author_id']];
            $answers[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $result['question'] = $question;
        $result['answers'] = $answers;
        $result['follow'] = ZhihuQuestionFollow::find()->where(['question_id' => $data['id'], 'user_id' => JwtTool::getUserId()])->one() ? 1 : 0;
        $follow_count = ZhihuQuestionFollow::find()->where(['question_id' => $data['id']])->count();
        $result['follow_count'] = !empty($follow_count) ? $follow_count : 0;
        $comment_count = Comment::find()->where(['answer_id'=>array_column($answers,'id')])->count();
        $result['comment_count'] = !empty($comment_count) ? $comment_count : 0;
        return Json::encode($result);
    }

    public function actionAnswerlist()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $p = ZhihuAnswer::find()
            ->asArray()
            ->where(['answer_id' => $data['id']])
            ->asArray()->all();
        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($p as $k => $v) {
            $p[$k]['author_name'] = $authors[$v['author_id']];
            $p[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $uid = Yii::$app->user->id;
        return Json::encode($p);
    }

    public function actionWriteAnswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = 1;
        $answer = new ZhihuAnswer();
        $answer->author_id = $author_id;
        $answer->content = $data['answer_content'];
        $answer->create_time = time();
        $answer->question_id = $data['question_id'];
        $answer->save();
        $answers = ZhihuAnswer::find()
            ->asArray()
            ->where(['question_id' => $data['question_id']])
            ->all();

        $followed = ZhihuQuestionFollow::find()->select(['user_id'])->where(['question_id' => $data['question_id']])->column();
        if($followed){
            $author_name = ZhihuMember::find()->select(['username'])->where(['id' => $author_id])->scalar();
            //发消息
            foreach ($followed as $v) {
                $notice_list[] = [
                    'type' => ZhihuNotice::NOTICE_TYPE_ANSWER, 'content' => "{$author_name}回答了问题",
                    'content_id' => $data['question_id'], 'user_id' => $v
                ];
            }
            Yii::$app->db->createCommand()
                ->batchInsert(ZhihuNotice::tableName(), array_keys($notice_list[0]), $notice_list)->execute();
        }

        $authors = Member::find()->select(['username'])->indexBy('id')->column();
        foreach ($answers as $k => $v) {
            $answers[$k]['author_name'] = $authors[$v['author_id']];
            $answers[$k]['up_count'] = empty($v['up_count']) ? 0 : $v['up_count'];
        }
        $result['state'] = 1;
        $result['answers'] = $answers;
        return Json::encode($result);
    }

    public function actionFollowAuthor()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = $data['author_id'];
        $fl = new FollowRelation();
        $fl->user_id = $author_id;
        $fl->follower_id = Yii::$app->user->id;
        $fl->save();
        $p['state'] = 1;
        return Json::encode($p);
    }

    /**
     * 关注问题
     * @return string
     */
    public function actionFollowQuestion()
    {
        $post = file_get_contents('php://input');
        $post = Json::decode($post);
        $exist = ZhihuQuestionFollow::findOne(['question_id'=>$post['question_id'],'user_id'=>JwtTool::getUserId()]);
        if(empty($exist)){
            $follow = new ZhihuQuestionFollow();
            $follow->question_id = $post['question_id'];
            $follow->user_id = JwtTool::getUserId();
            $follow->create_time = time();
            $follow->save();
            $follow_count = ZhihuQuestionFollow::find()->where(['question_id' => $post['question_id']])->count();
            $result['follow_count'] = !empty($follow_count) ? $follow_count : 0;
            return Json::encode(['state' => 1,'follow_count'=>$follow_count]);
        } else {
            ZhihuQuestionFollow::deleteAll(['question_id'=>$post['question_id'],'user_id'=>JwtTool::getUserId()]);
            $follow_count = ZhihuQuestionFollow::find()->where(['question_id' => $post['question_id']])->count();
            $result['follow_count'] = !empty($follow_count) ? $follow_count : 0;
            return Json::encode(['state' => 0,'follow_count'=>$follow_count]);
        }

    }

    /**
     * 点赞
     * @return string
     */
    public function actionVote()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $answer = ZhihuAnswer::findOne($answer_id);
        $answer->has_vote = 1;
        $answer->up_count += 1;
        $answer->save();
        $a['state'] = 1;
        return Json::encode($a);
    }

    public function actionComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $res = Comment::find()
            ->with('author')
            ->where(['answer_id' => $answer_id])->asArray()->all();
        foreach ($res as $k => $v) {
            $res[$k]['create_time'] = date('H:i', $res[$k]['create_time']);
        }
        return Json::encode($res);
    }

    public function actionLeaveComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $commnet = new Comment();
        $commnet->author_id = 1;
        $commnet->create_time = time();
        $commnet->vote_count = 0;
        $commnet->content = $data['content'];
        $commnet->answer_id = $answer_id;
        if (!$commnet->save()) {
            $res['text'] = $commnet->getErrors();
            return Json::encode($res);
        }
        $res = Comment::find()
            ->with('author')
            ->where(['answer_id' => $answer_id])->asArray()->all();
        foreach ($res as $k => $v) {
            $res[$k]['create_time'] = date('H:i', $res[$k]['create_time']);
        }
        return Json::encode($res);
    }

    public function actionTest11()
    {
        $data = ['token' => 333, 'uid' => 222, 'login_name' => 111, 'sid' => 23]; //默认sid];
        print_r(static::getToken($data));
    }

    /**
     * 生成token
     * @param $data
     * @return mixed
     */
    public static function getToken($data)
    {
        $token1 = Yii::$app->jwt->getBuilder()->setIssuer('jztw.com')// Configures the issuer (iss claim)
        ->setIssuedAt(time()); // Configures the time that the token was issue (iat claim)
        //->setNotBefore(time() + 60) // Configures the time before which the token cannot be accepted (nbf claim)
        //->setExpiration(time() + 3600); // 过期时间
        foreach ($data as $k => $v) {
            $token1->set($k, $v);
        }
        $token = $token1->getToken();
        return (string)$token;
    }

    public function actionVoteComment()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answer_id = $data['id'];
        $comment_id = $data['comment_id'];
        $answer = Comment::findOne($comment_id);
        $answer->vote_count += 1;
        $answer->save();
        $res = Comment::find()
            ->with('author')
            ->where(['answer_id' => $answer_id])->asArray()->all();
        foreach ($res as $k => $v) {
            $res[$k]['create_time'] = date('H:i', $res[$k]['create_time']);
        }
        return Json::encode($res);
    }


}
