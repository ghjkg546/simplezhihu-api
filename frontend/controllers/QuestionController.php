<?php
namespace frontend\controllers;

use general\components\JwtTool;
use general\models\Bike;
use general\models\ZhihuAnswerFollow;
use general\models\ZhihuMember;
use general\models\ZhihuNotice;
use general\models\ZhihuQuestion;
use general\models\ZhihuComment;
use general\models\FollowRelation;
use general\models\Member;
use general\models\RepairRecords;
use general\models\RidingRecord;
use general\models\VoteMember;
use general\models\ZhihuAnswer;
use general\models\ZhihuQuestionFollow;
use general\repositories\QuestionRepository;
use Yii;
use yii\base\Module;
use yii\helpers\Json;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;

/**
 * 问题控制器
 */
class QuestionController extends Controller
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    /**
     * 问题资源库
     * @var QuestionRepository
     */
    private $questionRepository;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function __construct($id, Module $module, array $config = [])
    {
        $this->questionRepository = new QuestionRepository();
        parent::__construct($id, $module, $config);
    }

    /*
     * 问题列表
     */
    public function actionIndex()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);

        $questions = $this->questionRepository->all($data);
        return Json::encode(['code'=>1,'data'=>$questions]);
    }

    /**
     * 最近浏览
     */
    public function actionRecent()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $type = $data['type'];
        $qu = ZhihuQuestion::find()
            ->asArray();
        if ($type == 1) {
            $qu->orderBy('up_count desc');
        } elseif ($type == 0) {
            $uid = Yii::$app->user->id;
            $ids = FollowRelation::find()->select(['user_id'])->where(['follower_id' => $uid])->column();
            $qu->andWhere(['author_id' => $ids]);
        }
        $p = $qu->all();
        foreach ($p as $k => $v) {
            $p['content'] = substr($v['content'], 0, 100);

        }
        return Json::encode($p);
    }

    /**
     * 问题详情
     * @return string
     */
    public function actionDetail()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $result = $this->questionRepository->one($data);
        return Json::encode($result);
    }


    /**
     * 写回答
     * @return string
     */
    public function actionWriteAnswer()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $result = $this->questionRepository->writeAnswer($data);
        return Json::encode($result);
    }

    /**
     * 关注作者
     * @return string
     */
    public function actionFollowAuthor()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $author_id = $data['author_id'];
        $fl = new FollowRelation();
        $fl->user_id = $author_id;
        $fl->follower_id = Yii::$app->user->id;
        $fl->save();
        $p['state'] = 1;
        return Json::encode($p);
    }

    /**
     * 关注问题
     * @return string
     */
    public function actionFollowQuestion()
    {
        $post = file_get_contents('php://input');
        $post = Json::decode($post);
        $exist = ZhihuQuestionFollow::findOne(['question_id' => $post['question_id'], 'user_id' => JwtTool::getUserId()]);
        if (empty($exist)) {
            $follow = new ZhihuQuestionFollow();
            $follow->question_id = $post['question_id'];
            $follow->user_id = JwtTool::getUserId();
            $follow->create_time = time();
            $follow->save();
            $follow_count = ZhihuQuestionFollow::find()->where(['question_id' => $post['question_id']])->count();
            $result['follow_count'] = !empty($follow_count) ? $follow_count : 0;
            return Json::encode(['state' => 1, 'follow_count' => $follow_count]);
        } else {
            ZhihuQuestionFollow::deleteAll(['question_id' => $post['question_id'], 'user_id' => JwtTool::getUserId()]);
            $follow_count = ZhihuQuestionFollow::find()->where(['question_id' => $post['question_id']])->count();
            $result['follow_count'] = !empty($follow_count) ? $follow_count : 0;
            return Json::encode(['state' => 0, 'follow_count' => $follow_count]);
        }

    }


}
