<?php
namespace backend\controllers;

use backend\models\Bike;
use backend\models\FriendLinks;
use backend\models\Member;
use backend\models\RepairRecords;
use backend\models\Category;
use backend\models\News;
use backend\models\Cases;
use backend\models\CaseCate;
use backend\models\RidingRecord;
use backend\models\SystemSetting;
use Yii;
use yii\helpers\Json;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;

/**
 * Site controller
 */
class HomeController extends Controller
{
    

    /**
     * Displays homepage.
     *
     * @return string
     */

    //public $layout=false;
    public $enableCsrfValidation = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        header("Access-Control-Allow-Origin: *");
        header("Access-Control-Allow-Credentials: true");
        header("Access-Control-Allow-Methods: POST, GET, OPTIONS");
        header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With,X-Token");
        header('P3P: CP="CAO PSA OUR"'); // Makes IE to support cookies
        header("Content-Type: application/json; charset=utf-8");
    }

    public function actionIndex()
    {
        return $this->render($this->action->id);
        $member= Member::findOne(1);
        return Json::encode($member);
    }

    public function actionShow(){
        return $this->render($this->action->id);
    }

    public function actionCaseDetail(){
        return $this->render($this->action->id);
    }

    public function actionGetCaseDetail()
    {
        $data=file_get_contents('php://input');

        $data=Json::decode($data);

        $news = Cases::find()->where(['id'=>$data['id']])->one();
        $prev= Cases::find()->where(['<','id',$data['id']])->orderBy('id desc')->one();
        $next =Cases::find()->where(['>','id',$data['id']])->orderBy('id')->one();
        $news['create_time'] = date('Y-m-d',$news['create_time']);
        $data['code']=20000;
        $data['news'] = $news;
        $data['prev'] = $prev;
        $data['next'] = $next;


        exit(Json::encode($data));

    }

    public function actionGetDetail()
    {
        $data=file_get_contents('php://input');

        $data=Json::decode($data);


        $news = News::find()->where(['id'=>$data['id']])->one();
        $news->view_count+=1;
        $news->save();
        $prev= News::find()->where(['<','id',$data['id']])->orderBy('id desc')->one();
        $next =News::find()->where(['>','id',$data['id']])->orderBy('id')->one();
        $links = FriendLinks::find()->asArray()->all();
        $news['create_time'] = date('Y-m-d',$news['create_time']);
        $data['news'] = $news;
        $data['prev'] = $prev;
        $data['next'] = $next;
        $data['links'] = $links;



        exit(Json::encode($data));

    }

    public function actionGetData()
    {
        $data=file_get_contents('php://input');
        
        $data=Json::decode($data);

        $cid = empty($data['cid'])?1:$data['cid'];
        $ccid = empty($data['ccid'])?1:$data['ccid'];
        
        $cates = Category::find()->asArray()->all();
        foreach ($cates as $k => $v) {
            $news = News::find()->asArray()->where(['cate_id'=>$v['id']])->limit(3)->all();
            foreach ($news as $k1 => $v1) {
                $news[$k1]['month'] = date('m',$v1['create_time']);
                $news[$k1]['day'] = date('d',$v1['create_time']);
            }
            $cates[$k]['news'] = $news;
            $cates[$k]['big'] = $cates[$k]['news'][0];
            $cates[$k]['big']['create_time'] = date('Y-m-d',$cates[$k]['big']['create_time']);
        }
        
        $news = News::find()->asArray()->where(['cate_id'=>$cid])->all();
        $system_info = SystemSetting::find()->one();
        $links = FriendLinks::find()->asArray()->all();
        $new_copy = [];
        foreach ($news as $key => $value) {
            if($key == 0) continue;
            $new_copy[]=$value;
        }
        
        $case_cates =CaseCate::find()
                ->from(CaseCate::tableName().' case_cate')
                ->innerJoin(Cases::tableName().' case','case.cate_id = case_cate.id')
                ->asArray()->all();

        foreach ($case_cates as $k => $v) {
            $cases =Cases::find()->asArray()->where(['cate_id'=>$v['id']])->all();
            foreach ($cases as $k1 => $v1) {
                $cases[$k1]['img_url'] = !empty($v1['img_url'])?$v1['img_url']:'http://'.$_SERVER['HTTP_HOST'].'/images/no_img.jpg';

            }
            $case_cates[$k]['cases'] = $cases;
        }
        $data['case_cates'] = $case_cates;
        $data['cates'] = $cates;
        
        $data['news'] = $new_copy;
        $data['links'] = $links;
        $data['system_info'] = $system_info;


       
       exit(Json::encode($data));

    }

    public function actionGetCaseData()
    {
        $data=file_get_contents('php://input');
        
        $data=Json::decode($data);

        $cid = empty($data['cid'])?1:$data['cid'];
        $cases =Cases::find()->asArray()->where(['cate_id'=>$cid])->all();
        foreach ($cases as $k => $v) {
            $cases[$k]['img_url'] = !empty($v['img_url'])?$v['img_url']:'http://'.$_SERVER['HTTP_HOST'].'/images/no_img.jpg';
        }
        $data['cases'] = $cases;


       
       exit(Json::encode($data));

    }

    public function actionBikelist(){
        $bikes = Bike::find()->asArray()->all();
        $data['lists'] = $bikes;
        $data['count'] = count($bikes);
        return Json::encode($data);
    }

    public function actionStart(){
        $data=file_get_contents('php://input');
        $data=Json::decode($data);
        $bike = Bike::find()->where(['bike_number'=>$data['bike_number']])->one();
        $record=new RidingRecord();
        $record->user_id = 1;
        $record->bike_id = $bike->id;
        $record->start_time = time();
        $record->start_lati = $bike->latitude;
        $record->start_long = $bike->longitude;
        $record->create_time = time();
        $record->update_time = time();
        $record->save(false);
        $data['msg']='开始骑行';
        $data['record_id'] = $record->id;
        return Json::encode($data);
    }

    public function actionEnd(){
        $data=file_get_contents('php://input');
        $data=Json::decode($data);
        $record=RidingRecord::findOne($data['record_id']);
        $record->end_time = time();
        $record->end_lati = $data['end_lati'];
        $record->end_long = $data['end_long'];
        $record->total_price = ceil((time() - $record->start_time)/(30*60)) ;
        $record->update_time = time();
        $record->save(false);
        $data['msg']='结束骑行';
        $distance = $this->getDistance($record->start_lati, $record->start_long, $data['end_lati'], $data['end_long']);
        $data['distance'] =$distance;
        return Json::encode($data);
    }

    public function actionRecord(){
        $res = RidingRecord::find()->where(['user_id'=>1])->orderBy('end_time desc')->asArray()->all();
        $data['status']=1;
        foreach ($res as $k=>$v){
            $res[$k]['start_time']= date("Y-m-d H:i:s",$v['start_time']);
            $res[$k]['end_time']= date("Y-m-d H:i:s",$v['end_time']);
            $res[$k]['cost_minute'] = floor(($v['end_time']-$v['start_time'])/60 );
            $res[$k]['cost_second'] = ($v['end_time']-$v['start_time']) % 60;
            $bike = Bike::findOne($v['bike_id']);
            $res[$k]['bike_number'] = $bike['bike_number'];
        }
        $data['data']=$res;
        $data['status']=200;


        return Json::encode($data);
    }

    public function getDistance($lat1, $lng1, $lat2, $lng2)
    {
        $earthRadius = 6367000; //approximate radius of earth in meters
        $lat1 = ($lat1 * pi()) / 180;
        $lng1 = ($lng1 * pi()) / 180;
        $lat2 = ($lat2 * pi()) / 180;
        $lng2 = ($lng2 * pi()) / 180;
        $calcLongitude = $lng2 - $lng1;
        $calcLatitude = $lat2 - $lat1;
        $stepOne = pow(sin($calcLatitude / 2), 2) + cos($lat1) * cos($lat2) * pow(sin($calcLongitude / 2), 2);
        $stepTwo = 2 * asin(min(1, sqrt($stepOne)));
        $calculatedDistance = $earthRadius * $stepTwo;
        return round($calculatedDistance);
    }
}
