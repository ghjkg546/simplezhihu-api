<?php
namespace backend\controllers;

use backend\component\CController;
use general\models\BatteArray;
use general\models\ZhihuAnswer;
use general\models\ZhihuMember;
use general\models\ZhihuQuestion;
use backend\repositories\QuestionRepository;
use Yii;
use yii\base\Module;
use yii\helpers\Json;
use yii\web\Controller;

/**
 * 阵容控制器
 */
class BattlearrayController extends CController
{



    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout = false;
    public $enableCsrfValidation = false;

    /**
     * 问题资源库
     * @var QuestionRepository
     */
    private $questionRepository;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function __construct($id, Module $module, array $config = [])
    {
        $this->questionRepository = new QuestionRepository();
        parent::__construct($id, $module, $config);
    }

    /*
     * 阵容列表
     */
    public function actionIndex()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $page_size = 5;
        $query = BatteArray::find();
        $query_clone = clone $query;
        if (!empty($data['page'])) {
            $query->offset(($data['page'] - 1) * $page_size)->limit($page_size);
        }
        $query->andWhere(['like', 'title', $data['keyword']]);
        $result = $query->asArray()->all();
        foreach ($result as $k => $v) {
            $result[$k]['heros'] = json_decode($v['heros'], 1);
            $result[$k]['create_time'] = date('Y-m-d H:s', $v['create_time']);
        }

        return $this->success($result,$query_clone->count());
    }

    public function actionDelete()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        BatteArray::deleteAll(['id' => $data['id']]);
        return Json::encode(['code' => 0, 'data' => []]);
    }


    /**
     * 阵容详情
     * @return string
     */
    public function actionDetail()
    {
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        if (empty($data['id'])) {
            return $this->success([], 0);
        }
        $result = BatteArray::findOne(['id' => $data['id']]);
        $result['hero_equipments'] = json_decode($result['hero_equipments'], 1);
        $result['heros'] = json_decode($result['heros'], 1);
        return Json::encode(['code' => 0, 'data' => $result]);
    }

    public function actionSave(){
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $id = empty($data['id'])?0:$data['id'];
        $result = BatteArray::findOne(['id'=>$id]);
        $battle = empty($result)?new BatteArray():$result;
        $battle->title = $data['title'];
        $battle->heros = Json::encode($data['heros']);
        $battle->playway = $data['playway'];
        $battle->hero_equipments = Json::encode($data['hero_equipments']);
        $battle->update_time = time();
        $battle->create_time = time();
        if(!$battle->save()){
            print_r($battle->getErrors());
        }
        return Json::encode(['code' => 0]);
    }





}
