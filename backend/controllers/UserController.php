<?php
namespace backend\controllers;

use backend\component\CController;
use backend\models\Bike;
use backend\models\FollowRelation;
use backend\models\Member;
use backend\models\News;
use backend\models\Cases;
use backend\models\wx\WXBizDataCrypt;
use general\models\ZhihuAnswer;
use general\models\ZhihuFollowUser;
use general\models\ZhihuMember;
use Yii;
use yii\helpers\Json;

/**
 * Site controller
 */
class UserController extends CController
{


    /**
     * Displays homepage.
     *
     * @return string
     */
    public $layout=false;
    public $enableCsrfValidation = false;

    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
    }


    public function actionCharge(){
        $data=file_get_contents('php://input');
        $data=Json::decode($data);
        $member = Member::findOne(1);
        $member->money += $data['money'];
        $member->save();
        echo 1;exit;
    }


    public function actionIndex()
    {
        $users = ZhihuMember::find()->asArray()->all();
        foreach ($users as $k=>$v){
            $users[$k]['create_time'] = date('Y-m-d',$v['create_time']);
        }
        $count = ZhihuMember::find()->count();
        return $this->success($users, $count);
    }

    public function actionDetail()
    {
        $data=file_get_contents("php://input");
        $data=Json::decode($data);
        $user = ZhihuMember::find()->where(['id'=>$data['id']])->one();
        return $this->success($user);
    }

    public function actionSave()
    {
        $data=file_get_contents("php://input");
        $data=Json::decode($data);
        $user = ZhihuMember::findOne(['id'=>$data['id']]);
        $user->setAttributes($data);
        if(!$user->save()){
            return $this->failed(Json::encode($user->getErrors()));
        }

        return $this->success($user);
    }


    public function actionAdd(){
        $a=file_get_contents("php://input");
        $b=Json::decode($a);
        $member=new Member();
        $member->username=$b['name'];
        $member->money =$b['money'];
        //$member->
    }

    public function actionEdit(){
        $a=file_get_contents("php://input");
        $b=Json::decode($a);
        $b=$b['data'];
        if(!empty($b)){
            $member= Member::findOne($b['id']);
            $member->username = $b['name'];
            $member->money=$b['money'];
            $member->save(false);
            $data['status'] =200;

            $users = Member::find()->asArray()->all();
            $data['data']['lists'] = $users;
            $data['data']['total'] = count($users);
            return Json::encode($data);
        }

    }

    public function actionDelete(){
        $a=file_get_contents("php://input");
        $b=Json::decode($a);
        Member::deleteAll(['id'=>$b['id']]);
        $data['status'] =200;

        $users = Member::find()->asArray()->all();
        $data['data']['lists'] = $users;
        $data['data']['total'] = count($users);
        return Json::encode($data);
    }

    /**
     * 问题列表
     * @return mixed
     */
    public function actionGetAnswerList(){
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $answers = $this->page(ZhihuAnswer::find()->where(['author_id'=>$data['id']]))->asArray()->all();
        $authors = ZhihuMember::find()->select('username')->indexBy('id')->column();
        foreach ($answers as $k=>$v){
            $answers[$k]['author_name'] = $authors[$v['author_id']];
            $answers[$k]['create_time'] = date('Y-m-d',$v['create_time']);
        }
        $count = ZhihuAnswer::find()->where(['question_id'=>$data['id']])->count();
        return $this->success($answers,$count);
    }

    /**
     * 粉丝列表
     * @return mixed
     */
    public function actionGetFansList(){
        $data = file_get_contents('php://input');
        $data = Json::decode($data);
        $query = ZhihuFollowUser::find()
            ->select(['user.*','follow.*'])
            ->from(ZhihuFollowUser::tableName().' follow')
            ->innerJoin(ZhihuMember::tableName().' user','user.id=follow.follow_user_id')
            ->where(['follow.user_id'=>$data['id']]);
        $query->andFilterWhere(['like', 'user.username',$data['keyword']]);
        $clone = clone $query;
        $answers = $this->page($query)->asArray()->all();
        foreach ($answers as $k=>$v){
            $answers[$k]['follower_name'] =$v['username'];
            $answers[$k]['create_time'] = date('Y-m-d',$v['create_time']);
        }
        return $this->success($answers,$clone->count());
    }



    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();
        $data['code']=20000;
        $data['data']='success';
        return Json::encode($data);

        return $this->goHome();
    }


    public function actionLogin(){
        $data=file_get_contents('php://input');
        $data=Json::decode($data);
        $name = $data['username'];
        $password = $data['password'];
        /*$member = Member::find()->where(['username'=>$name,'password'=>md5($password)])->one();
        if($member){
            $token_data = ['uid' => $member->id, 'loginName' => $name ]; //默认sid];
            $token = static::getToken($token_data);
            $data = ['token' => $token, 'uid' => $member->id, 'login_name' => $name ]; //默认sid];*/
            //return Json::encode(['state'=>1,'text'=>'','data'=>$data]);
       // }
        $data['code']=0;
        $data['data']['token']='amdin';
        return Json::encode($data);


        return Json::encode(['state'=>0,'text'=>'错误的用户名密码']);



    }

    public function actionInfo(){
        $data=file_get_contents('php://input');
        $data=Json::decode($data);
        $name = $data['username'];
        $password = $data['password'];
        /*$member = Member::find()->where(['username'=>$name,'password'=>md5($password)])->one();
        if($member){
            $token_data = ['uid' => $member->id, 'loginName' => $name ]; //默认sid];
            $token = static::getToken($token_data);
            $data = ['token' => $token, 'uid' => $member->id, 'login_name' => $name ]; //默认sid];*/
        //return Json::encode(['state'=>1,'text'=>'','data'=>$data]);
        // }
        $data['code']=0;
        $data['data']['avatar']='https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif';
        $data['data']['name']='xiaojie';
        $data['data']['roles']='admin';
        return Json::encode($data);


        return Json::encode(['state'=>0,'text'=>'错误的用户名密码']);



    }

    public function actionTable(){

        $keyword = Yii::$app->request->get('keyword');
        $limit = Yii::$app->request->get('pagesize',10);
        $page = Yii::$app->request->get('page',1);
        $offset = ($page-1)*$limit;

        $list = News::find()->asArray()
       ->limit($limit)
        ->offset($offset)
        ->andFilterWhere(['like','title',$keyword])
        ->all();
        foreach ($list as $k=>$v){
            $list[$k]['content'] = mb_substr(strip_tags($v['content']),0,50);
            $list[$k]['create_time'] = date('Y-m-d H:i',$v['create_time']);
        }
        $data['code']=20000;
        $data['data']=$list;
        return Json::encode($data);


        return Json::encode(['state'=>0,'text'=>'错误的用户名密码']);

    }


    public function actionFollowList(){
        $uid = Yii::$app->user->id;
        $res=FollowRelation::find()
            ->select(['m.username','m.id','m.brief','m.avatar'])
            ->from(FollowRelation::tableName().' fr')
            ->innerJoin(Member::tableName().' m', 'm.id=fr.user_id')
            ->where(['follower_id'=>$uid])->asArray()->all();
        $a['state'] = 1;
        $a['data'] = $res;
        return Json::encode($a);
    }


    /**
     * 生成token
     * @param $data
     * @return mixed
     */
    public static function getToken($data)
    {
        $token1 = Yii::$app->jwt->getBuilder()->setIssuer('jztw.com')// Configures the issuer (iss claim)
        ->setIssuedAt(time()) // Configures the time that the token was issue (iat claim)
        //->setNotBefore(time() + 60) // Configures the time before which the token cannot be accepted (nbf claim)
        ->setExpiration(time() + 3600*3); // 过期时间
        foreach ($data as $k => $v) {
            $token1->set($k, $v);
        }
        $token = $token1->getToken();
        return (string)$token;
    }
}
